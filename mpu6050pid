
import smbus2
import time
import sys

# MPU-6050 constants
PWR_MGMT_1 = 0x6B
GYRO_XOUT_H = 0x43
DEVICE_ADDR = 0x68
bus = smbus2.SMBus(1)

def mpu_init():
    for attempt in range(3):
        try:
            bus.write_byte_data(DEVICE_ADDR, PWR_MGMT_1, 0)
            time.sleep(0.1)
            return True
        except OSError:
            time.sleep(0.2)
    print("MPU-6050 initialization failed!")
    return False

def robust_read(addr, max_retries=3):
    for attempt in range(max_retries):
        try:
            high = bus.read_byte_data(DEVICE_ADDR, addr)
            low = bus.read_byte_data(DEVICE_ADDR, addr + 1)
            value = (high << 8) | low
            return value - 65536 if value > 32768 else value
        except OSError as e:
            if attempt == max_retries - 1:
                raise
            print(f"I2C read error, retrying... ({attempt+1}/{max_retries})")
            mpu_init()
            time.sleep(0.05)

def calibrate_gyro(samples=2000):
    print("Calibrating gyro, keep robot still...")
    offset_z = 0
    successful_reads = 0

    for _ in range(samples):
        try:
            offset_z += robust_read(GYRO_XOUT_H + 4) / 131.0
            successful_reads += 1
            time.sleep(0.001)
        except OSError:
            print("Skipping bad reading during calibration")
            continue

    if successful_reads < samples * 0.9:
        print("Calibration failed - too many bad readings")
        sys.exit(1)

    offset_z /= successful_reads
    print(f"Calibration offset: {offset_z:.5f} (from {successful_reads} samples)")
    return offset_z
